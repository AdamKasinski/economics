import pandas as pd
import requests
from lxml import html
from furl import furl
import datetime
import time


class Input():
    def __init__(self, file):
        self.file = file  # plik
        self.kwoty = []  # kwoty do przeliczenia
        self.daty = []  # daty w pliku z wejścia

    def zamien(self):
        dat = []
        wart = []
        plik = open(self.file)
        for line in plik.readlines():
            line.rstrip()
            ln = line.split(',')
            dat.append(ln[0])
            wart.append(int(ln[1]))
        plik.close()
        dane = {'Data': dat, "Wartosc": wart}
        self.kwoty = wart
        self.daty = dat
        return pd.DataFrame(dane)

    def podaj(self):
        return self.zamien()

    def podaj_kwoty(self):
        return self.kwoty

    def podaj_daty(self):
        return self.daty


class Dodatkowe():
    def __init__(self, data):
        self.dni_wolne = ['01.01.20', '06.01.20', '12.04.20', '13.04.20', '01.05.20', '03.05.20', '31.05.20',
                          '11.06.20']
        self.data = data
        self.year = int(self.data.split('.')[2])
        self.month = int(self.data.split('.')[1])
        self.day = int(self.data.split('.')[0])
        self.ilosc = {'1': 21, '2': 20, '3': 22, '4': 21, '5': 20, '6': 21, '7': 23, '8': 20, '9': 22, '10': 22,
                      '11': 20, '12': 21}
        self.trzjeden = [1, 3, 5, 7, 8, 10, 12]

    def czy_wolne(self, data):
        if data in self.dni_wolne:
            return False
        dat = datetime.date(int(data.split('.')[2]), int(data.split('.')[1]), int(data.split('.')[0]))
        if dat.weekday() == 5 or dat.weekday() == 6:
            return False
        return True

    def policz(self):
        ile_przed = 0
        for i in range(int(self.month) - 1):
            ile_przed += self.ilosc[str(i + 1)]
        for i in range(self.day):
            dzien = i + 1
            data = '{}.{}.{}'.format(dzien, self.month, self.year)
            if self.czy_wolne(str(data)):
                ile_przed += 1
        return ile_przed

    def daj_kod(self):
        bylo = self.policz()
        a = 1
        while True:
            if int(self.day) == 1:
                month = int(self.month) - 1
                if month in self.trzjeden:
                    day_before = 31
                elif month == 2:
                    day_before = 29
                else:
                    day_before = 30
                data_before = '{}.{}.{}'.format(day_before, month, self.year)
            else:
                day_before = self.day - a
                data_before = '{}.{}.{}'.format(day_before, self.month, self.year)
            if self.czy_wolne(self.data):
                bylo = bylo - a
            if self.czy_wolne(data_before):
                kod = 'a0{}z'
                gotowe = kod.format(bylo)
                data = data_before
                dat = data.split('.')
                odw = dat[::-1]
                nowe = ''
                for i in range(len(odw)):
                    if int(odw[i]) < 10:
                        odw[i] = '0{}'.format(odw[i])
                    nowe += odw[i]
                dane = gotowe + nowe
                return dane

            else:
                a += 1


class Pobierz():  # pojedyncze pobranie
    def __init__(self, daty):
        self.daty = daty  # wszystkie daty
        self.lista = []  # lista kursów

    def sciagnij(self, data):
        dane = Dodatkowe(data).daj_kod()
        url = furl('https://www.nbp.pl/home.aspx?navid=archa&c=/ascx/tabarch.ascx').add({'n': dane}).url
        r = requests.get(url)
        tekst = html.fromstring(r.content)
        nazw = tekst.xpath('//td[@class="bgt1 left"]/text()') + tekst.xpath('//td[@class="bgt2 left"]/text()')
        kod_wart = tekst.xpath('//td[@class="bgt1 right"]/text()') + tekst.xpath('//td[@class="bgt2 right"]/text()')
        dt = {'nazwa': nazw, 'wartosc': kod_wart[1::2]}
        tabela = pd.DataFrame(dt)
        wynik = 0
        for i, j in enumerate(tabela['nazwa']):
            if j == 'euro':
                wynik = tabela['wartosc'][i]
        self.lista.append(wynik)

    def podaj(self):
        return self.lista


class Output():
    def __init__(self, kwota, lista, daty):
        self.kwota = kwota  # kurs
        self.lista = lista  # lista kwot do przeliczenia
        self.daty = daty  # lista dat
        self.przeliczone = self.przelicz()

    def przelicz(self):
        kwoty = []
        for i in range(len(self.lista)):
            kurs = str(self.kwota[i]).replace(',', '.')
            zl = str(self.lista[i]).replace(',', '.')
            kwoty.append(float(kurs) * float(zl))
        return kwoty

    def do_pliku(self):
        output = pd.DataFrame(columns=['data', 'PLN', 'kurs', 'euro'])
        for i in range(len(self.lista)):
            output = output.append(
                {'data': self.daty[i], 'PLN': self.lista[i], 'kurs': self.kwota[i], 'euro': self.przeliczone[i]},
                ignore_index=True)
        output.to_csv('kwoty.csv', index=False)
        return output


def main(plik):
    wejscie = Input(plik)
    wejscie_zamiana = wejscie.zamien()
    pobranie = Pobierz(wejscie.podaj_daty())
    for i in range(len(wejscie_zamiana)):
        pobranie.sciagnij(wejscie.podaj_daty()[i])
        time.sleep(0.1)
    kursy = pobranie.podaj()
    output = Output(kursy, wejscie.podaj_kwoty(), wejscie.podaj_daty())
    return output.do_pliku()
